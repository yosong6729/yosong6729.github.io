<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Querydsl on Yosong6729 Blog</title>
    <link>https://yosong6729.github.io/tags/querydsl/</link>
    <description>Recent content in Querydsl on Yosong6729 Blog</description>
    <image>
      <title>Yosong6729 Blog</title>
      <url>https://yosong6729.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://yosong6729.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.133.1</generator>
    <language>en</language>
    <lastBuildDate>Thu, 10 Oct 2024 17:34:13 +0900</lastBuildDate>
    <atom:link href="https://yosong6729.github.io/tags/querydsl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Querydsl] 순수 JPA와 Querydsl</title>
      <link>https://yosong6729.github.io/post/querydsl---%EC%88%9C%EC%88%98-jpa-querydsl/</link>
      <pubDate>Thu, 10 Oct 2024 17:34:13 +0900</pubDate>
      <guid>https://yosong6729.github.io/post/querydsl---%EC%88%9C%EC%88%98-jpa-querydsl/</guid>
      <description>해당 글은 김영한님의 인프런 강의 실전! Querydsl을 듣고 내용을 정리하기 위한 것으로 자세한 설명은 해당 강의를 통해 확인할 수 있습니다.
순수 JPA 리포지토리와 Querydsl 순수 JPA 리포지토리
@Repository public class MemberJpaRepository { private final EntityManager em; private final JPAQueryFactory queryFactory; public MemberJpaRepository(EntityManager em) { this.em = em; this.queryFactory = new JPAQueryFactory(em); } public void save(Member member) { em.persist(member); } public Optional&amp;lt;Member&amp;gt; findById(Long id) { Member findMember = em.find(Member.class, id); return Optional.</description>
    </item>
    <item>
      <title>[Querydsl] 중급 문법</title>
      <link>https://yosong6729.github.io/post/querydsl---%EC%A4%91%EA%B8%89-%EB%AC%B8%EB%B2%95/</link>
      <pubDate>Wed, 09 Oct 2024 22:07:15 +0900</pubDate>
      <guid>https://yosong6729.github.io/post/querydsl---%EC%A4%91%EA%B8%89-%EB%AC%B8%EB%B2%95/</guid>
      <description>해당 글은 김영한님의 인프런 강의 실전! Querydsl을 듣고 내용을 정리하기 위한 것으로 자세한 설명은 해당 강의를 통해 확인할 수 있습니다.
프로젝션 결과 반환 - 기본 프로젝션은 select절의 대상을 지정하는것을 말한다.
프로젝션 대상이 하나 @Test public void simplePorjection() { List&amp;lt;String&amp;gt; result = queryFactory .select(member.username) .from(member) .fetch(); for (String s : result) { System.out.println(&amp;#34;s = &amp;#34; + s); } } select절에 member.username으로 프로젝션 대상이 하나 이기 때문에 String 타입으로 명확하게 지정이 가능하다.</description>
    </item>
    <item>
      <title>[Querydsl]기본 문법</title>
      <link>https://yosong6729.github.io/post/querydsl---%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%95/</link>
      <pubDate>Mon, 07 Oct 2024 22:17:33 +0900</pubDate>
      <guid>https://yosong6729.github.io/post/querydsl---%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%95/</guid>
      <description>해당 글은 김영한님의 인프런 강의 실전! Querydsl을 듣고 내용을 정리하기 위한 것으로 자세한 설명은 해당 강의를 통해 확인할 수 있습니다.
예제 도메인 모델을 엔티티 클래스와 ERD만 확인하고 넘어가겠다.
JPQL vs Querydsl 테스트 기본 코드
@SpringBootTest @Transactional public class QuerydslBasicTest { @PersistenceContext EntityManager em; @BeforeEach public void before() { queryFactory = new JPAQueryFactory(em); Team teamA = new Team(&amp;#34;teamA&amp;#34;); Team teamB = new Team(&amp;#34;teamB&amp;#34;); em.persist(teamA); em.persist(teamB); Member member1 = new Member(&amp;#34;member1&amp;#34;, 10, teamA); Member member2 = new Member(&amp;#34;member2&amp;#34;, 20, teamA); Member member3 = new Member(&amp;#34;member3&amp;#34;, 30, teamB); Member member4 = new Member(&amp;#34;member4&amp;#34;, 40, teamB); em.</description>
    </item>
  </channel>
</rss>
