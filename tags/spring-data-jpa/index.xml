<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Spring Data JPA on Yosong6729 Blog</title>
    <link>https://yosong6729.github.io/tags/spring-data-jpa/</link>
    <description>Recent content in Spring Data JPA on Yosong6729 Blog</description>
    <image>
      <title>Yosong6729 Blog</title>
      <url>https://yosong6729.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://yosong6729.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.133.1</generator>
    <language>en</language>
    <lastBuildDate>Fri, 04 Oct 2024 19:39:56 +0900</lastBuildDate>
    <atom:link href="https://yosong6729.github.io/tags/spring-data-jpa/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>나머지 기능</title>
      <link>https://yosong6729.github.io/post/%EB%82%98%EB%A8%B8%EC%A7%80-%EA%B8%B0%EB%8A%A5/</link>
      <pubDate>Fri, 04 Oct 2024 19:39:56 +0900</pubDate>
      <guid>https://yosong6729.github.io/post/%EB%82%98%EB%A8%B8%EC%A7%80-%EA%B8%B0%EB%8A%A5/</guid>
      <description>해당 글은 김영한님의 인프런 강의 스프링 데이터 JPA을 듣고 내용을 정리하기 위한 것으로 자세한 설명은 해당 강의를 통해 확인할 수 있습니다
Specifications(명세) 책 도메인 주도 설계(DDD)는 SPECIFICATION(명세)라는 개념을 소개한다. 스프링 데이터 JPA는 JPA Criteria를 활용해서 이 개념을 사용할 수 있도록 지원한다.
술어(predicate)
참 또는 거짓으로 평가 AND OR 같은 연산자로 조합해서 다양한 검색조건을 쉽게 생성(컴포지트 패턴) 예) 검색 조건 하나하나 스프링 데이터 JPA는 org.springframework.data.jpa.domain.Specification클래스로 정의 명세 기능 사용 방법</description>
    </item>
    <item>
      <title>스프링 데이터 JPA 구현체 분석</title>
      <link>https://yosong6729.github.io/post/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%8D%B0%EC%9D%B4%ED%84%B0-jpa-%EA%B5%AC%ED%98%84%EC%B2%B4-%EB%B6%84%EC%84%9D/</link>
      <pubDate>Thu, 03 Oct 2024 16:16:50 +0900</pubDate>
      <guid>https://yosong6729.github.io/post/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%8D%B0%EC%9D%B4%ED%84%B0-jpa-%EA%B5%AC%ED%98%84%EC%B2%B4-%EB%B6%84%EC%84%9D/</guid>
      <description>해당 글은 김영한님의 인프런 강의 스프링 데이터 JPA을 듣고 내용을 정리하기 위한 것으로 자세한 설명은 해당 강의를 통해 확인할 수 있습니다.
스프링 데이터 JPA 구현체 분석 스프링 데이터 JPA가 제공하는 공통 인터페이스 구현체
org.springframework.data.jpa.repository.support.SimpleJpaRepository
SimpleJpaRepository
@Repository @Transactional(readOnly = true) public class SimpleJpaRepository&amp;lt;T, ID&amp;gt; ... { @Override @Transactional public &amp;lt;S extends T&amp;gt; S save(S entity) { Assert.notNull(entity, &amp;#34;Entity must not be null&amp;#34;); if (entityInformation.isNew(entity)) { entityManager.persist(entity); return entity; } else { return entityManager.</description>
    </item>
    <item>
      <title>확장 기능</title>
      <link>https://yosong6729.github.io/post/%ED%99%95%EC%9E%A5-%EA%B8%B0%EB%8A%A5/</link>
      <pubDate>Wed, 02 Oct 2024 23:07:03 +0900</pubDate>
      <guid>https://yosong6729.github.io/post/%ED%99%95%EC%9E%A5-%EA%B8%B0%EB%8A%A5/</guid>
      <description>해당 글은 김영한님의 인프런 강의 스프링 데이터 JPA을 듣고 내용을 정리하기 위한 것으로 자세한 설명은 해당 강의를 통해 확인할 수 있습니다.
사용자 정의 리포지토리 구현 스프링 데이터 JPA 리포지토리는 인터페이스만 정의하면 구현체는 스프링이 자동으로 생성한다.
스프링 데이터 JPA가 제공하는 인터페이스를 직접 구현j하면 구현해야 하는 기능이 너무 많다.
JPA를 직접사용(EntityManager), 스프링 JDBC Template, MyBatis, 데이터베이스 커넥션 직접 사용, Querydls 등 다양한 이유로 인터페이스의 메서드를 직접 구현하고 싶다면 어떻게 해야할까?
사용저 정의 인터페이스</description>
    </item>
    <item>
      <title>쿼리 메소드 기능</title>
      <link>https://yosong6729.github.io/post/%EC%BF%BC%EB%A6%AC-%EB%A9%94%EC%86%8C%EB%93%9C-%EA%B8%B0%EB%8A%A5/</link>
      <pubDate>Mon, 30 Sep 2024 22:22:10 +0900</pubDate>
      <guid>https://yosong6729.github.io/post/%EC%BF%BC%EB%A6%AC-%EB%A9%94%EC%86%8C%EB%93%9C-%EA%B8%B0%EB%8A%A5/</guid>
      <description>해당 글은 김영한님의 인프런 강의 스프링부트와 JPA활용2 - API 개발과 성능 최적화을 듣고 내용을 정리하기 위한 것으로 자세한 설명은 해당 강의를 통해 확인할 수 있습니다.
쿼리 메소드 기능 3가지
메소드 이름으로 쿼리 생성 메소드 이름으로 JPA NamedQuery 호출 @Query 어노테이션을 사용해서 리포지토리 인터페이스 쿼리 직접 정의 메소드 이름으로 쿼리 생성 메소드 이름을 분석해서 JPQL 쿼리를 실행한다.
이름과 나이를 기준으로 회원을 조회하는 상황이다.
순수 JPA 리포지토리
public List&amp;lt;Member&amp;gt; findByUsernameAndAgeGreaterThen(String username, int age) { return em.</description>
    </item>
    <item>
      <title>공통 인터페이스 기능</title>
      <link>https://yosong6729.github.io/post/%EA%B3%B5%ED%86%B5-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EA%B8%B0%EB%8A%A5/</link>
      <pubDate>Sun, 29 Sep 2024 20:01:38 +0900</pubDate>
      <guid>https://yosong6729.github.io/post/%EA%B3%B5%ED%86%B5-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EA%B8%B0%EB%8A%A5/</guid>
      <description>해당 글은 김영한님의 인프런 강의 실전! 스프링 데이터 JPA을 듣고 내용을 정리하기 위한 것으로 자세한 설명은 해당 강의를 통해 확인할 수 있습니다.
예제 도메인 모델을 엔티티 클래스와 ERD만 확인하고 넘어가겠다.
순수 JPA 기반 리포지토리 만들기 기본 CRUD 저장 변경 → 변경 감지 사용 삭제 전체 조회f 단건 조회 카운트 JPA에서 수정은 변경감지 기능을 사용하면 된다. 트랜잭션 안에서 엔티티를 조회한 다음에 데이터를 변경하면, 트랜잭션 종료 시점에 변경감지 기능이 작동해서 변경된 엔티티를 감지하고 UPDATE SQL을 실행한다.</description>
    </item>
  </channel>
</rss>
