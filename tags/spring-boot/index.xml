<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Spring Boot on Yosong6729 Blog</title>
    <link>https://yosong6729.github.io/tags/spring-boot/</link>
    <description>Recent content in Spring Boot on Yosong6729 Blog</description>
    <image>
      <title>Yosong6729 Blog</title>
      <url>https://yosong6729.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://yosong6729.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.133.1</generator>
    <language>en</language>
    <lastBuildDate>Wed, 25 Sep 2024 20:34:54 +0900</lastBuildDate>
    <atom:link href="https://yosong6729.github.io/tags/spring-boot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>컬렉션 조회 최적화</title>
      <link>https://yosong6729.github.io/post/%EC%BB%AC%EB%A0%89%EC%85%98-%EC%A1%B0%ED%9A%8C-%EC%B5%9C%EC%A0%81%ED%99%94/</link>
      <pubDate>Wed, 25 Sep 2024 20:34:54 +0900</pubDate>
      <guid>https://yosong6729.github.io/post/%EC%BB%AC%EB%A0%89%EC%85%98-%EC%A1%B0%ED%9A%8C-%EC%B5%9C%EC%A0%81%ED%99%94/</guid>
      <description>해당 글은 김영한님의 인프런 강의 스프링부트와 JPA활용2 - API 개발과 성능 최적화을 듣고 내용을 정리하기 위한 것으로 자세한 설명은 해당 강의를 통해 확인할 수 있습니다.
주문내역에서 추가로 주문한 상품 정보를 추가로 조회를 한다.
Order 기준으로 컬렉션인 OrderItem와 Item이 필요하다.
컬렉션인 일대다 관계(OneToMany)를 조회하고 최적화 하는 방법을 알아본다.
주문 조회 V1: 엔티티 직접노출 @RestController @RequiredArgsConstructor public class OrderApiController { private final OrderRepository orderRepository; /** * V1. 엔티티 직접 노출 * - Hibernate5Module 모듈 등록, LAZY=null 처리 * - 양방향 관계 문제 발생 -&amp;gt; @JsonIgnore */ @GetMapping(&amp;#34;/api/v1/orders&amp;#34;) public List&amp;lt;Order&amp;gt; ordersV1() { List&amp;lt;Order&amp;gt; all = orderRepository.</description>
    </item>
    <item>
      <title>지연 로딩과 조회 성능 최적화</title>
      <link>https://yosong6729.github.io/post/%EC%A7%80%EC%97%B0-%EB%A1%9C%EB%94%A9%EA%B3%BC-%EC%A1%B0%ED%9A%8C-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94/</link>
      <pubDate>Tue, 24 Sep 2024 16:03:53 +0900</pubDate>
      <guid>https://yosong6729.github.io/post/%EC%A7%80%EC%97%B0-%EB%A1%9C%EB%94%A9%EA%B3%BC-%EC%A1%B0%ED%9A%8C-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94/</guid>
      <description>해당 글은 김영한님의 인프런 강의 스프링부트와 JPA활용2 - API 개발과 성능 최적화을 듣고 내용을 정리하기 위한 것으로 자세한 설명은 해당 강의를 통해 확인할 수 있습니다.
간단한 주문 조회 V1: 엔티티를 직접 노출 @xToOne(ManyToOne, OneToOne) 관계를 최적화 하는데에 집중한다.
V1은 좋은 방법이 아니기 때문에 간단히 보고 넘어가도 된다.
@RestController @RequiredArgsConstructor public class OrderSimpleApiController { private final OrderRepository orderRepository; @GetMapping(&amp;#34;/api/v1/simple-orders&amp;#34;) public List&amp;lt;Order&amp;gt; ordersV1() { List&amp;lt;Order&amp;gt; all = orderRepository.findAllByString(new OrderSearch()); for (Order order : all) { //getMember까지는 프록시 객체를 가져오고.</description>
    </item>
    <item>
      <title>API 개발 기본</title>
      <link>https://yosong6729.github.io/post/api-%EA%B0%9C%EB%B0%9C-%EA%B8%B0%EB%B3%B8/</link>
      <pubDate>Mon, 23 Sep 2024 16:35:17 +0900</pubDate>
      <guid>https://yosong6729.github.io/post/api-%EA%B0%9C%EB%B0%9C-%EA%B8%B0%EB%B3%B8/</guid>
      <description>해당 글은 김영한님의 인프런 강의 스프링부트와 JPA활용2 - API 개발과 성능 최적화을 듣고 내용을 정리하기 위한 것으로 자세한 설명은 해당 강의를 통해 확인할 수 있습니다.
회원 등록 API 회원 등록 API
@RestController @RequiredArgsConstructor public class MemberApiController { private final MemberService memberService; @PostMapping(&amp;#34;/api/v1/members&amp;#34;) public CreateMemberResponse saveMemberV1(@RequestBody @Valid Member member) { Long id = memberService.join(member); return new CreateMemberResponse(id); } @Data static class CreateMemberRequest { private String name; } @Data static class CreateMemberResponse { private Long id; public CreateMemberResponse(Long id) { this.</description>
    </item>
    <item>
      <title>웹 계층 개발</title>
      <link>https://yosong6729.github.io/post/%EC%9B%B9-%EA%B3%84%EC%B8%B5-%EA%B0%9C%EB%B0%9C/</link>
      <pubDate>Sun, 22 Sep 2024 18:17:58 +0900</pubDate>
      <guid>https://yosong6729.github.io/post/%EC%9B%B9-%EA%B3%84%EC%B8%B5-%EA%B0%9C%EB%B0%9C/</guid>
      <description>해당 글은 김영한님의 인프런 강의 스프링부트와 JPA활용1 - 웹 어플리케이션 개발을 듣고 내용을 정리하기 위한 것으로 자세한 설명은 해당 강의를 통해 확인할 수 있습니다.
홈 화면과 레이아웃 홈 컨트롤러 등록 @Slf4j @Controller public class HomeController { @RequestMapping(&amp;#34;/&amp;#34;) public String home() { log.info(&amp;#34;home controller&amp;#34;); return &amp;#34;home&amp;#34;; } } 타임리프 템플릿 등록 home.html &amp;lt;!DOCTYPE HTML&amp;gt; &amp;lt;html xmlns:th=&amp;#34;http://www.thymeleaf.org&amp;#34;&amp;gt; &amp;lt;head th:replace=&amp;#34;fragments/header :: header&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Hello&amp;lt;/title&amp;gt; &amp;lt;meta http-equiv=&amp;#34;Content-Type&amp;#34; content=&amp;#34;text/html; charset=UTF-8&amp;#34; /&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;div th:replace=&amp;#34;fragments/bodyHeader :: bodyHeader&amp;#34; /&amp;gt; &amp;lt;div class=&amp;#34;jumbotron&amp;#34;&amp;gt; &amp;lt;h1&amp;gt;HELLO SHOP&amp;lt;/h1&amp;gt; &amp;lt;p class=&amp;#34;lead&amp;#34;&amp;gt;회원 기능&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;a class=&amp;#34;btn btn-lg btn-secondary&amp;#34; href=&amp;#34;/members/new&amp;#34;&amp;gt;회원 가입&amp;lt;/a&amp;gt; &amp;lt;a class=&amp;#34;btn btn-lg btn-secondary&amp;#34; href=&amp;#34;/members&amp;#34;&amp;gt;회원 목록&amp;lt;/a&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p class=&amp;#34;lead&amp;#34;&amp;gt;상품 기능&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;a class=&amp;#34;btn btn-lg btn-dark&amp;#34; href=&amp;#34;/items/new&amp;#34;&amp;gt;상품 등록&amp;lt;/a&amp;gt; &amp;lt;a class=&amp;#34;btn btn-lg btn-dark&amp;#34; href=&amp;#34;/items&amp;#34;&amp;gt;상품 목록&amp;lt;/a&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p class=&amp;#34;lead&amp;#34;&amp;gt;주문 기능&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;a class=&amp;#34;btn btn-lg btn-info&amp;#34; href=&amp;#34;/order&amp;#34;&amp;gt;상품 주문&amp;lt;/a&amp;gt; &amp;lt;a class=&amp;#34;btn btn-lg btn-info&amp;#34; href=&amp;#34;/orders&amp;#34;&amp;gt;주문 내역&amp;lt;/a&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div th:replace=&amp;#34;fragments/footer :: footer&amp;#34; /&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;!</description>
    </item>
    <item>
      <title>도메인 개발</title>
      <link>https://yosong6729.github.io/post/%EB%8F%84%EB%A9%94%EC%9D%B8-%EA%B0%9C%EB%B0%9C/</link>
      <pubDate>Sat, 21 Sep 2024 19:42:01 +0900</pubDate>
      <guid>https://yosong6729.github.io/post/%EB%8F%84%EB%A9%94%EC%9D%B8-%EA%B0%9C%EB%B0%9C/</guid>
      <description>해당 글은 김영한님의 인프런 강의 스프링부트와 JPA활용1 - 웹 어플리케이션 개발을 듣고 내용을 정리하기 위한 것으로 자세한 설명은 해당 강의를 통해 확인할 수 있습니다.
예제를 단순화 하기 위해 다음 기능은 구현X
로그인과 권한 관리X 파라미터 검증과 예외 처리X 상품은 도서만 사용 카테고리는 사용X 배송 정보는 사용X 애플리케이션 아키텍처 계층적 구조 사용
controller, web: 웹 계층 service: 비즈니스 로직, 트랜잭션 처리 repository: JPA를 직접 사용하는 계층, 엔티티 매니저 사용 domain: 엔티티가 모여 있는 계층, 모든 계층에서 사용 회원 도메인 개발 구현 기능</description>
    </item>
    <item>
      <title>도메인 분석 설계</title>
      <link>https://yosong6729.github.io/post/%EB%8F%84%EB%A9%94%EC%9D%B8-%EB%B6%84%EC%84%9D-%EC%84%A4%EA%B3%84/</link>
      <pubDate>Fri, 20 Sep 2024 16:55:02 +0900</pubDate>
      <guid>https://yosong6729.github.io/post/%EB%8F%84%EB%A9%94%EC%9D%B8-%EB%B6%84%EC%84%9D-%EC%84%A4%EA%B3%84/</guid>
      <description>해당 글은 김영한님의 인프런 강의 스프링부트와 JPA활용1 - 웹 어플리케이션 개발을 듣고 내용을 정리하기 위한 것으로 자세한 설명은 해당 강의를 통해 확인할 수 있습니다.
요구사항 분석 위 사진과 같은 형태로 개발할것이고 아래는 개발할 기능 목록이다.
기능목록
회원 기능
회원 등록, 조회
상품 기능
상품 등록, 수정, 조회
주문 기능
상품 주문, 주문 내역 조회, 주문 취소
기타 요구사항
상품은 재고 관리가 필요하다 상품 종류는 도서 음반, 영화가 있다. 상품은 카테고리로 구분할 수 있다.</description>
    </item>
  </channel>
</rss>
