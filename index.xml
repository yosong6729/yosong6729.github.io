<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Yosong6729 Blog</title>
    <link>https://yosong6729.github.io/</link>
    <description>Recent content on Yosong6729 Blog</description>
    <image>
      <title>Yosong6729 Blog</title>
      <url>https://yosong6729.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://yosong6729.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.133.1</generator>
    <language>en</language>
    <lastBuildDate>Sun, 22 Sep 2024 18:17:58 +0900</lastBuildDate>
    <atom:link href="https://yosong6729.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>웹 계층 개발</title>
      <link>https://yosong6729.github.io/post/%EC%9B%B9-%EA%B3%84%EC%B8%B5-%EA%B0%9C%EB%B0%9C/</link>
      <pubDate>Sun, 22 Sep 2024 18:17:58 +0900</pubDate>
      <guid>https://yosong6729.github.io/post/%EC%9B%B9-%EA%B3%84%EC%B8%B5-%EA%B0%9C%EB%B0%9C/</guid>
      <description>해당 글은 김영한님의 인프런 강의 스프링부트와 JPA활용1 - 웹 어플리케이션 개발을 듣고 내용을 정리하기 위한 것으로 자세한 설명은 해당 강의를 통해 확인할 수 있습니다.
홈 화면과 레이아웃 홈 컨트롤러 등록 @Slf4j @Controller public class HomeController { @RequestMapping(&amp;#34;/&amp;#34;) public String home() { log.info(&amp;#34;home controller&amp;#34;); return &amp;#34;home&amp;#34;; } } 타임리프 템플릿 등록 home.html &amp;lt;!DOCTYPE HTML&amp;gt; &amp;lt;html xmlns:th=&amp;#34;http://www.thymeleaf.org&amp;#34;&amp;gt; &amp;lt;head th:replace=&amp;#34;fragments/header :: header&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Hello&amp;lt;/title&amp;gt; &amp;lt;meta http-equiv=&amp;#34;Content-Type&amp;#34; content=&amp;#34;text/html; charset=UTF-8&amp;#34; /&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;div th:replace=&amp;#34;fragments/bodyHeader :: bodyHeader&amp;#34; /&amp;gt; &amp;lt;div class=&amp;#34;jumbotron&amp;#34;&amp;gt; &amp;lt;h1&amp;gt;HELLO SHOP&amp;lt;/h1&amp;gt; &amp;lt;p class=&amp;#34;lead&amp;#34;&amp;gt;회원 기능&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;a class=&amp;#34;btn btn-lg btn-secondary&amp;#34; href=&amp;#34;/members/new&amp;#34;&amp;gt;회원 가입&amp;lt;/a&amp;gt; &amp;lt;a class=&amp;#34;btn btn-lg btn-secondary&amp;#34; href=&amp;#34;/members&amp;#34;&amp;gt;회원 목록&amp;lt;/a&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p class=&amp;#34;lead&amp;#34;&amp;gt;상품 기능&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;a class=&amp;#34;btn btn-lg btn-dark&amp;#34; href=&amp;#34;/items/new&amp;#34;&amp;gt;상품 등록&amp;lt;/a&amp;gt; &amp;lt;a class=&amp;#34;btn btn-lg btn-dark&amp;#34; href=&amp;#34;/items&amp;#34;&amp;gt;상품 목록&amp;lt;/a&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;p class=&amp;#34;lead&amp;#34;&amp;gt;주문 기능&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;a class=&amp;#34;btn btn-lg btn-info&amp;#34; href=&amp;#34;/order&amp;#34;&amp;gt;상품 주문&amp;lt;/a&amp;gt; &amp;lt;a class=&amp;#34;btn btn-lg btn-info&amp;#34; href=&amp;#34;/orders&amp;#34;&amp;gt;주문 내역&amp;lt;/a&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div th:replace=&amp;#34;fragments/footer :: footer&amp;#34; /&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;!</description>
    </item>
    <item>
      <title>도메인 개발</title>
      <link>https://yosong6729.github.io/post/%EB%8F%84%EB%A9%94%EC%9D%B8-%EA%B0%9C%EB%B0%9C/</link>
      <pubDate>Sat, 21 Sep 2024 19:42:01 +0900</pubDate>
      <guid>https://yosong6729.github.io/post/%EB%8F%84%EB%A9%94%EC%9D%B8-%EA%B0%9C%EB%B0%9C/</guid>
      <description>해당 글은 김영한님의 인프런 강의 스프링부트와 JPA활용1 - 웹 어플리케이션 개발을 듣고 내용을 정리하기 위한 것으로 자세한 설명은 해당 강의를 통해 확인할 수 있습니다.
예제를 단순화 하기 위해 다음 기능은 구현X
로그인과 권한 관리X 파라미터 검증과 예외 처리X 상품은 도서만 사용 카테고리는 사용X 배송 정보는 사용X 애플리케이션 아키텍처 계층적 구조 사용
controller, web: 웹 계층 service: 비즈니스 로직, 트랜잭션 처리 repository: JPA를 직접 사용하는 계층, 엔티티 매니저 사용 domain: 엔티티가 모여 있는 계층, 모든 계층에서 사용 회원 도메인 개발 구현 기능</description>
    </item>
    <item>
      <title>도메인 분석 설계</title>
      <link>https://yosong6729.github.io/post/%EB%8F%84%EB%A9%94%EC%9D%B8-%EB%B6%84%EC%84%9D-%EC%84%A4%EA%B3%84/</link>
      <pubDate>Fri, 20 Sep 2024 16:55:02 +0900</pubDate>
      <guid>https://yosong6729.github.io/post/%EB%8F%84%EB%A9%94%EC%9D%B8-%EB%B6%84%EC%84%9D-%EC%84%A4%EA%B3%84/</guid>
      <description>해당 글은 김영한님의 인프런 강의 스프링부트와 JPA활용1 - 웹 어플리케이션 개발을 듣고 내용을 정리하기 위한 것으로 자세한 설명은 해당 강의를 통해 확인할 수 있습니다.
요구사항 분석 위 사진과 같은 형태로 개발할것이고 아래는 개발할 기능 목록이다.
기능목록
회원 기능
회원 등록, 조회
상품 기능
상품 등록, 수정, 조회
주문 기능
상품 주문, 주문 내역 조회, 주문 취소
기타 요구사항
상품은 재고 관리가 필요하다 상품 종류는 도서 음반, 영화가 있다. 상품은 카테고리로 구분할 수 있다.</description>
    </item>
    <item>
      <title>[자바 ORM 표준 JPA 프로그래밍 - 기본편] 객체지향 쿼리 언어2 - 중급문법</title>
      <link>https://yosong6729.github.io/post/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EC%BF%BC%EB%A6%AC-%EC%96%B8%EC%96%B42---%EC%A4%91%EA%B8%89%EB%AC%B8%EB%B2%95/</link>
      <pubDate>Thu, 19 Sep 2024 16:32:07 +0900</pubDate>
      <guid>https://yosong6729.github.io/post/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EC%BF%BC%EB%A6%AC-%EC%96%B8%EC%96%B42---%EC%A4%91%EA%B8%89%EB%AC%B8%EB%B2%95/</guid>
      <description>해당 글은 김영한님의 인프런 강의 자바 ORM 표준 JPA 프로그래밍 - 기본편을 듣고 내용을 정리하기 위한 것으로 자세한 설명은 해당 강의를 통해 확인할 수 있습니다.
JPQL - 경로 표현식 경로 표현식은 .(점)을 찍어 객체 그래프를 탐색하는 것이다.
select m.username -&amp;gt; 상태 필드 from Member m join m.team t -&amp;gt; 단일 값 연관 필드 join m.orders o -&amp;gt; 컬렉션 값 연관 필드 where t.name = &amp;#39;팀A&amp;#39; 경로 표현식 용어 정리 상태 필드(state field): 단순히 값을 저장하기 위한 필드(ex: m.</description>
    </item>
    <item>
      <title>[자바 ORM 표준 JPA 프로그래밍 - 기본편] 객체지향 쿼리 언어1 - 기본문법</title>
      <link>https://yosong6729.github.io/post/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EC%BF%BC%EB%A6%AC-%EC%96%B8%EC%96%B41---%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95/</link>
      <pubDate>Wed, 18 Sep 2024 22:20:14 +0900</pubDate>
      <guid>https://yosong6729.github.io/post/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EC%BF%BC%EB%A6%AC-%EC%96%B8%EC%96%B41---%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95/</guid>
      <description>객체지향 쿼리 언어 소개 JPA는 다양한 쿼리 방법을 지원 JPQL JPA Criteria QueryDSL 네이티브 SQL JDBC API 직접 사용, MyBatis, SpringJdbcTemplate 함께 사용 JPQL 소개 가장 단순한 조회 방법 EntityManager.find() 객체 그래프 탐색(a.getB().getC()) JPQL JPA를 사용하면 엔티티 객체를 중심으로 개발 문제는 검색 쿼리 검색을 할 때도 테이블이 아닌 엔티티 객체를 대상으로 검색 모든 DB 데이터를 객체로 변환해서 검색하는 것은 불가능 애플리케이션이 필요한 데이터만 DB에서 불러오려면 결국 검색 조건이 포함된 SQL이 필요 JPA는 SQL을 추상화한 JPQL이라는 객체 지향 쿼리 언어 제공 SQL과 문법 유사, SELECT, FROM, WHERE, GROUP BY, HAVING, JOIN 지원 JPQL은 엔티티 객체를 대상으로 쿼리 SQL은 데이터베이스 테이블을 대상으로 쿼리 //검색 String jpql = &amp;#34;select m From Member m where m.</description>
    </item>
    <item>
      <title>[자바 ORM 표준 JPA 프로그래밍 - 기본편] 값 타입</title>
      <link>https://yosong6729.github.io/post/%EA%B0%92-%ED%83%80%EC%9E%85/</link>
      <pubDate>Tue, 17 Sep 2024 13:58:05 +0900</pubDate>
      <guid>https://yosong6729.github.io/post/%EA%B0%92-%ED%83%80%EC%9E%85/</guid>
      <description>해당 글은 김영한님의 인프런 강의 자바 ORM 표준 JPA 프로그래밍 - 기본편을 듣고 내용을 정리하기 위한 것으로 자세한 설명은 해당 강의를 통해 확인할 수 있습니다.
값 타입 JPA의 데이터 타입 분류 엔티티 타입 @Entity로 정의하는 객체 데이터가 변해도 식별자로 지속해서 추적 가능 예) 회원 엔티티의 키나 나이 값을 변경해도 식별자로 인식 가능 값 타입 int, Integer, String처럼 단순히 값으로 사용하는 자바 기본 타입이나 객체 식별자가 없고 값만 있으므로 변경시 추적 불가 예) 숫자 100을 200으로 변경하면 완전히 다른 값으로 대체 값 타입 분류 기본값 타입 자바 기본 타입(int, double) 래퍼 클래스(Integer, Long) String 임베디드 타입(embedded type, 복합 값 타입) 컬렉션 값 타입(collection value type) 기본값 타입 예): String name, int age 생명주기를 엔티티의 의존 예) 회원을 삭제하면 이름, 나이 필드도 함께 삭제 값 타입은 공유하면X 예) 회원 이름 변경시 다른 회원의 이름도 함께 변경되면 안됨 참고: 자바의 기본 타입은 절대 공유X int, double 같은 기본 타입(primitive type)은 절대 공유X 기본 타입은 항상 값을 복사함 int a = 10; int b = a; a의 10이 복사되서 b에게 저장된다.</description>
    </item>
    <item>
      <title>[자바 ORM 표준 JPA 프로그래밍 - 기본편] 프록시와 연관관계 관리</title>
      <link>https://yosong6729.github.io/post/%ED%94%84%EB%A1%9D%EC%8B%9C%EC%99%80-%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EA%B4%80%EB%A6%AC/</link>
      <pubDate>Sun, 15 Sep 2024 18:03:01 +0900</pubDate>
      <guid>https://yosong6729.github.io/post/%ED%94%84%EB%A1%9D%EC%8B%9C%EC%99%80-%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EA%B4%80%EB%A6%AC/</guid>
      <description>해당 글은 김영한님의 인프런 강의 자바 ORM 표준 JPA 프로그래밍 - 기본편을 듣고 내용을 정리하기 위한 것으로 자세한 설명은 해당 강의를 통해 확인할 수 있습니다.
프록시 Memer를 조회할 때 Team도 함께 조회 해야 할까? public void printUserAndTeam(String memberId) { Member member = em.find(Member.class, memberId); Team team = member.getTeam(); System.out.println(&amp;#34;회원 이름: &amp;#34; + member.getUsername()); System.out.println(&amp;#34;소속팀: &amp;#34; + team.getName()); } 회원과 팀 함께 출력 public void printUser(String memberId) { Member member = em.</description>
    </item>
    <item>
      <title>[자바 ORM 표준 JPA 프로그래밍 - 기본편] 고급 매핑</title>
      <link>https://yosong6729.github.io/post/%EA%B3%A0%EA%B8%89-%EB%A7%A4%ED%95%91/</link>
      <pubDate>Sat, 14 Sep 2024 22:36:31 +0900</pubDate>
      <guid>https://yosong6729.github.io/post/%EA%B3%A0%EA%B8%89-%EB%A7%A4%ED%95%91/</guid>
      <description>해당 글은 김영한님의 인프런 강의 자바 ORM 표준 JPA 프로그래밍 - 기본편을 듣고 내용을 정리하기 위한 것으로 자세한 설명은 해당 강의를 통해 확인할 수 있습니다.
상속관계 매핑 관계형 데이터베이스는 상속 관계X 슈퍼타입 서브타입 관계라는 모델링 기법이 객체 상속과 유사 상속관계 매핑: 객체의 상속과 구조와 DB의 슈퍼타입 서브타입 관계를 매핑 슈퍼 타입 서브타입 논리 모델을 실제 물리 모델로 구현하는 방법 각각 테이블로 변환 → 조인 전략 통합 테이블로 변환 → 단일 테이블 전략 서브타입 테이블로 변환 → 구현 클래스마다 테이블 전략 주요 어노테이션 @Inheritance(strategy=InheritanceType.</description>
    </item>
    <item>
      <title>[자바 ORM 표준 JPA 프로그래밍 - 기본편] 다양한 연관관계 매핑</title>
      <link>https://yosong6729.github.io/post/%EB%8B%A4%EC%96%91%ED%95%9C-%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91/</link>
      <pubDate>Thu, 12 Sep 2024 15:50:55 +0900</pubDate>
      <guid>https://yosong6729.github.io/post/%EB%8B%A4%EC%96%91%ED%95%9C-%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91/</guid>
      <description>해당 글은 김영한님의 인프런 강의 자바 ORM 표준 JPA 프로그래밍 - 기본편을 듣고 내용을 정리하기 위한 것으로 자세한 설명은 해당 강의를 통해 확인할 수 있습니다.
연관관계 매핑시 고려사항 3가지 다중성 단방향, 양방향 연관관계의 주인 다중성 다대일: @ManyToOne 일대다: @OneToMany 일대일: @OneToOne 다대다: @ManyToMany 단방향, 양방향 테이블 외래 키 하나로 양쪽 조인 가능 사실 방향이라는 개념이 없음 객체 참조용 필드가 있는 쪽으로만 참조 가능 한쪽만 참조하면 단방향 양쪽이 서로 참조하면 양방향 연관관계의 주인 테이블은 외래 키 하나로 두 테이블이 연관관계를 맺음 객체 양방향 관계는 A-&amp;gt;B, B-&amp;gt;A 처럼 참조가 2군데 객체 양방향 관계는 참조가 2군데 있음.</description>
    </item>
    <item>
      <title>[자바 ORM 표준 JPA 프로그래밍 - 기본편] 연관관계 매핑 기초</title>
      <link>https://yosong6729.github.io/post/%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91-%EA%B8%B0%EC%B4%88/</link>
      <pubDate>Wed, 11 Sep 2024 16:47:33 +0900</pubDate>
      <guid>https://yosong6729.github.io/post/%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91-%EA%B8%B0%EC%B4%88/</guid>
      <description>해당 글은 김영한님의 인프런 강의 자바 ORM 표준 JPA 프로그래밍 - 기본편을 듣고 내용을 정리하기 위한 것으로 자세한 설명은 해당 강의를 통해 확인할 수 있습니다.
연관관계가 필요한 이유 ‘객체지향 설계의 목표는 자율적인 객체들의 협력 공동체를 만드는 것이다.’
– 조영호(객체지향의 사실과 오해) -
예제 시나리오 회원과 팀이 있다. 회원은 하나의 팀에만 소속될 수 있다. 회원과 팀은 다대일 관계다. 객체를 테이블에 맞추어 모델링 연관관계가 없는 객체이다.
@Entity public class Member { @Id @GeneratedValue private Long id; @Column(name = &amp;#34;USERNAME&amp;#34;) private String name; @Column(name = &amp;#34;TEAM_ID&amp;#34;) private Long teamId; … } @Entity public class Team { @Id @GeneratedValue private Long id; private String name; … } 참조 대신에 외래 키를 그대로 사용한다.</description>
    </item>
    <item>
      <title>[자바 ORM 표준 JPA 프로그래밍 - 기본편] 엔티티 매핑</title>
      <link>https://yosong6729.github.io/post/%EC%97%94%ED%8B%B0%ED%8B%B0-%EB%A7%A4%ED%95%91/</link>
      <pubDate>Tue, 10 Sep 2024 21:26:15 +0900</pubDate>
      <guid>https://yosong6729.github.io/post/%EC%97%94%ED%8B%B0%ED%8B%B0-%EB%A7%A4%ED%95%91/</guid>
      <description>해당 글은 김영한님의 인프런 강의 자바 ORM 표준 JPA 프로그래밍 - 기본편을 듣고 내용을 정리하기 위한 것으로 자세한 설명은 해당 강의를 통해 확인할 수 있습니다.
엔티티 매핑 객체와 테이블 매핑: @Entity, @Table 필드와 컬럼 매핑: @Column 기본 키 매핑: @Id 연관관계 매핑: @ManyToOne,@JoinColumn 객체와 테이블 매핑 @Entity
@Entity가 붙은 클래스는 JPA가 관리, 엔티티라 한다. JPA를 사용해서 테이블과 매핑할 클래스는 @Entity 필수 주의 기본 생성자 필수(파라미터가 없는 public 또는 protected 생성자) final 클래스, enum, interface, inner 클래스 사용X 저장할 필드에 final 사용 X @Entity 속성 정리</description>
    </item>
    <item>
      <title>[자바 ORM 표준 JPA 프로그래밍 - 기본편] 영속성 관리</title>
      <link>https://yosong6729.github.io/post/%EC%98%81%EC%86%8D%EC%84%B1/%EC%98%81%EC%86%8D%EC%84%B1/</link>
      <pubDate>Mon, 09 Sep 2024 18:21:27 +0900</pubDate>
      <guid>https://yosong6729.github.io/post/%EC%98%81%EC%86%8D%EC%84%B1/%EC%98%81%EC%86%8D%EC%84%B1/</guid>
      <description>해당 글은 김영한님의 인프런 강의 자바 ORM 표준 JPA 프로그래밍 - 기본편을 듣고 내용을 정리하기 위한 것으로 자세한 설명은 해당 강의를 통해 확인할 수 있습니다.
영속성 컨텍스트 JPA에서 가장 중요한 2가지 객체와 관계형 데이터베이스 매핑하기(Object Relational Mapping) 영속성 컨텍스트 영속성 컨텍스트는 엔티티를 영구 저장하는 환경이라는 뜻이다. 논리적인 개념이며 눈에 보이지 않는다. 엔티티 매니저를 통해서 영속성 컨텍스트에 접근할 수 있다.
생명주기 엔티티는 아래와 같은 생명주기가 존재한다.
비영속 (new/transient) 영속성 컨텍스트와 전혀 관계가 없는 새로운 상태 영속 (managed) 영속성 컨텍스트에 관리되는 상태 준영속 (detached) 영속성 컨텍스트에 저장되었다가 분리된 상 삭제 (removed) 삭제된 상태 비영속 1 2 3 4 //객체를 생성한 상태(비영속) Member member = new Member(); member.</description>
    </item>
    <item>
      <title>New Post</title>
      <link>https://yosong6729.github.io/post/new-post/</link>
      <pubDate>Wed, 04 Sep 2024 17:32:42 +0900</pubDate>
      <guid>https://yosong6729.github.io/post/new-post/</guid>
      <description></description>
    </item>
  </channel>
</rss>
